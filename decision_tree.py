# -*- coding: utf-8 -*-
"""Decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ns8tG4MNvi5gvf1EvfiSLVgUKesTvIrL
"""

from sklearn.tree import DecisionTreeRegressor
#from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn import metrics
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import csv
#import random
#import statistics
from scipy import stats
#from sklearn import linear_model
#from sklearn.preprocessing import StandardScaler
#from sklearn.preprocessing import LabelEncoder

File = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTdOLcbAcUihTHfSg7vnnV7zsxo29btaN_Dn3OhiVhR1BXGcRtV2bJlZCHsGpYvgwacvB01XI51GAOs/pub?gid=56675948&single=true&output=csv"

#แบ่งไฟล์ train ไฟล์ test

data = pd.read_csv(File)
data

#x_train = train_df[['Year','Department_LabelEncoded','Self', 'University', 'homework']]
#y_train = train_df['GPA']
#x_test = test_df[['Year','Department_LabelEncoded','Self', 'University', 'homework']]
#y_test = test_df['GPA']

feature_cols = ['Year', 'Department_LabelEncoded','Self','University', 'homework']
X = data[feature_cols] # Features
y = data.GPA # Target
X

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=42)

dtr = DecisionTreeRegressor()
# Train Decision Tree Classifer
dtr = dtr.fit(X_train,y_train)
# ทำนายค่า GPA จากข้อมูลการทดสอบ
y_pred = dtr.predict(X_test)

y_pred

# คำนวณค่าความแม่นยำ
r2_value = r2_score(y_test, y_pred)
print("R-squared (R2):", r2_value)
mean_absolute = mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error (MAE):", mean_absolute)
mean_squared = mean_squared_error(y_test, y_pred)
print("Mean Squared Error (MSE):", mean_squared)
accuracy = 1 - mean_squared
print("Accuracy: ", accuracy)

# Create a scatter plot of actual vs. predicted values
plt.figure(figsize=(8, 6))
plt.plot(y_test.values, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.xlabel("Data point")
plt.ylabel("Predicted GPA")
plt.title("Actual vs Predicted GPA")
#plt.plot(y_test, y_test, color='red', label='Predicted')
plt.legend()
plt.grid(True)
plt.show()