# -*- coding: utf-8 -*-
"""linear_reg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1daztI32ssjC-TP8tESVlXApxmDPvxWsu
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import csv
import random
import statistics
from scipy import stats
from sklearn import linear_model
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
#from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder

File = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTdOLcbAcUihTHfSg7vnnV7zsxo29btaN_Dn3OhiVhR1BXGcRtV2bJlZCHsGpYvgwacvB01XI51GAOs/pub?gid=56675948&single=true&output=csv"

data = pd.read_csv(File)
data

#x_train = train_df[['คุณใช้เวลาเรียนด้วยตัวเองกี่ชั่วโมงต่อสัปดาห์', 'คุณใช้เวลาเรียนที่มหาลัยกี่ชั่วโมงต่อสัปดาห์', 'คุณใช้เวลาทำการบ้านกี่ชั่วโมงต่อสัปดาห์']]
#y_train = train_df['เกรดเฉลี่ยเท่าไร']
#x_test = test_df[['คุณใช้เวลาเรียนด้วยตัวเองกี่ชั่วโมงต่อสัปดาห์', 'คุณใช้เวลาเรียนที่มหาลัยกี่ชั่วโมงต่อสัปดาห์', 'คุณใช้เวลาทำการบ้านกี่ชั่วโมงต่อสัปดาห์']]
#y_test = test_df['เกรดเฉลี่ยเท่าไร']

# Create a StandardScaler instance
#sc = StandardScaler()

# Fit and transform the training data
#X_train = sc.fit_transform(x_train)

# Only transform the testing data using the mean and standard deviation from the training data
#X_test = sc.transform(x_test)

# Create and train the Linear Regression model
#lr = LinearRegression()
#model = lr.fit(X_train, y_train)

#x_train = train_df[['Year','Department_LabelEncoded','Self', 'University', 'homework']]
#y_train = train_df['GPA']
#x_test = test_df[['Year','Department_LabelEncoded','Self', 'University', 'homework']]
#y_test = test_df['GPA']

#encoder = LabelEncoder()
#x_train['คุณกำลังศึกษาอยู่ในระดับชั้นปีที่เท่าไหร่'] = x_train['คุณกำลังศึกษาอยู่ในระดับชั้นปีที่เท่าไหร่'].map({'ปีที่ 1': 1, 'ปีที่ 2': 2, 'ปีที่ 3': 3, 'ปีที่ 4': 4})
#x_test['คุณกำลังศึกษาอยู่ในระดับชั้นปีที่เท่าไหร่'] = x_test['คุณกำลังศึกษาอยู่ในระดับชั้นปีที่เท่าไหร่'].map({'ปีที่ 1': 1, 'ปีที่ 2': 2, 'ปีที่ 3': 3, 'ปีที่ 4': 4})
#x_train['คุณกำลังศึกษาอยู่สังกัดคณะใด'] = x_train['คุณกำลังศึกษาอยู่สังกัดคณะใด'].map({'ปีที่ 1': 1, 'ปีที่ 2': 2, 'ปีที่ 3': 3, 'ปีที่ 4': 4})
#x_test['คุณกำลังศึกษาอยู่สังกัดคณะใด'] = x_test['คุณกำลังศึกษาอยู่สังกัดคณะใด'].map({'ปีที่ 1': 1, 'ปีที่ 2': 2, 'ปีที่ 3': 3, 'ปีที่ 4': 4})

feature_cols = ['Year', 'Department_LabelEncoded','Self','University', 'homework']
X = data[feature_cols] # Features
y = data.GPA # Target variable
X

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=42)

# Create and train the Linear Regression model
lr = LinearRegression()
model = lr.fit(X_train, y_train)

X_test

# Make predictions
y_pred = model.predict(X_test)

#คำนวณความสัมพันธ์ตัวแปรต้น ตัวแปรตาม แสดงผลลัพธ์เป็นค่าของ coefficients (สัมประสิทธิ์)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

y_test

y_pred

# Calculate the evaluation metrics
r2_value = r2_score(y_test, y_pred)
# คำนวณค่าความแม่นยำ
print("R-squared (R2):", r2_value)
mean_absolute = mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error (MAE):", mean_absolute)
mean_squared = mean_squared_error(y_test, y_pred)
print("Mean Squared Error (MSE):", mean_squared)
accuracy = 1 - mean_squared
print("Accuracy: ", accuracy)

# Create a scatter plot of actual vs. predicted values
plt.figure(figsize=(8, 6))
plt.plot(y_test.values, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.xlabel("Data point")
plt.ylabel("Predicted GPA")
plt.title("Actual vs Predicted GPA")
#plt.plot(y_test, y_test, color='red', label='Predicted')
plt.legend()
plt.grid(True)
plt.show()